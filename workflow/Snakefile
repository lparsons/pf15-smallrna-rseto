# The main entry point of your workflow for PF15 Small RNA
# After configuring, running snakemake -n in a clone of this repository should
# successfully execute a dry-run of the workflow.

import pandas as pd
from snakemake.utils import validate, min_version

##### set minimum snakemake version #####
min_version("8.10")


##### load config and sample sheets #####
configfile: "config/config.yaml"


validate(config, schema="schemas/config.schema.yaml")


samples = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample_name": str})
    .set_index("sample_name", drop=False)
    .sort_index()
)
validate(samples, schema="schemas/samples.schema.yaml")

units = (
    pd.read_csv(config["units"], sep="\t", dtype={"sample_name": str, "unit_name": str})
    .set_index(["sample_name", "unit_name"], drop=False)
    .sort_index()
)
validate(units, schema="schemas/units.schema.yaml")


wildcard_constraints:
    sample="|".join(samples["sample_name"]),
    unit="|".join(units["unit_name"]),


# Report overview
report: "report/workflow.rst"


##### target rules #####
rule all:
    input:
        expand(
            "results/aligned-{genome}/{unit.sample_name}-{unit.unit_name}/Aligned.sortedByCoord.out.bam.bai",
            unit=units.itertuples(),
            genome="pf15",
        ),
        expand(
            "results/homology-overlap/homology-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}-overlap-putative-smallrna-downreg.bed",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        "results/aligned-pf15-coverage/putative-smallrna-regions.bed",
        "results/qc/multiqc.html",
        expand(
            "results/summary/genelist-summary-{expression}.txt",
            expression=["neuron", "neuron-germline"],
        ),


rule all_genome:
    input:
        f"{config['reference']['pf15']['fasta']}.intergenic-regions.bed",
        f"{config['reference']['pf15']['fasta']}.intergenic-regions.fasta",
        "results/homology/blast-pf15-intergenic-regions-celegans-transcripts.tsv",
        "results/celegans-genes-transcipts.tsv",
        "resources/pf15-star-genome",


rule all_blast:
    input:
        "results/homology/blast-pf15-intergenic-regions-celegans-transcripts.tsv",
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid.tsv",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
        ),
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid-genes.tsv",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
        ),
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid-genes.unique-genes.txt",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
        ),
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}.tsv",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}.unique-genes.txt",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        expand(
            "results/homology/blast-pf15-intergenic-regions-celegans-transcripts-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}.bed",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),


rule all_trim:
    input:
        expand(
            "results/trimmed/{unit.sample_name}-{unit.unit_name}.fastq.gz",
            unit=units.itertuples(),
        ),


rule all_qc:
    input:
        expand(
            "results/trimmed/{unit.sample_name}-{unit.unit_name}.qc.txt",
            unit=units.itertuples(),
        ),
        expand(
            "results/aligned-{genome}/{unit.sample_name}-{unit.unit_name}-samtools-stats.txt",
            unit=units.itertuples(),
            genome="pf15",
        ),
        "results/qc/multiqc.html",


rule all_align:
    input:
        "resources/pf15-star-genome",
        expand(
            "results/aligned-{genome}/{unit.sample_name}-{unit.unit_name}/Aligned.sortedByCoord.out.bam",
            unit=units.itertuples(),
            genome="pf15",
        ),
        expand(
            "results/aligned-{genome}/{unit.sample_name}-{unit.unit_name}/Aligned.sortedByCoord.out.bam.bai",
            unit=units.itertuples(),
            genome="pf15",
        ),


rule all_coverage:
    input:
        expand(
            "results/aligned-{genome}-coverage/{unit.sample_name}-{unit.unit_name}-genomecov.bedgraph",
            unit=units.itertuples(),
            genome="pf15",
        ),
        expand(
            "results/aligned-{genome}-coverage/{unit.sample_name}-{unit.unit_name}-genomecov-min{threshold}.bedgraph",
            unit=units.itertuples(),
            genome="pf15",
            threshold=config["params"]["min_coverage"],
        ),
        "results/aligned-pf15-coverage/putative-smallrna-regions.bed",


rule all_homology_overlap:
    input:
        expand(
            "results/homology-overlap/homology-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}-overlap-putative-smallrna.bed",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        expand(
            "results/homology-overlap/homology-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}-overlap-putative-smallrna.unique-genes.txt",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        expand(
            "results/homology-overlap/homology-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}-overlap-putative-smallrna-downreg.bed",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),
        expand(
            "results/homology-overlap/homology-{min_length}-bp-{min_pct_id}-pctid-genes-expressed-{expression}-overlap-putative-smallrna-downreg.unique-genes.txt",
            min_length=config["params"]["blast"]["min_length"],
            min_pct_id=config["params"]["blast"]["min_pct_id"],
            expression=["neuron", "neuron-germline"],
        ),


#
# ##### setup report #####
#
#
# report: "report/workflow.rst"
#
#
# ##### load rules #####
# include: "rules/signal.smk"
# include: "rules/counts.smk"
# include: "rules/window_counts.smk"
# include: "rules/counts_significant_regions.smk"
# include: "rules/diffexp.smk"
# include: "rules/diffexp_windows.smk"
# include: "rules/diffexp_significant_regions.smk"


include: "rules/genome.smk"
include: "rules/blast.smk"
include: "rules/trim.smk"
include: "rules/fastqc.smk"
include: "rules/align.smk"
include: "rules/multiqc.smk"
include: "rules/coverage.smk"
include: "rules/homology-overlap.smk"
include: "rules/summary.smk"
